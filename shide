#!/bin/bash
#-----------------------------------------------------------------------
# ShIDE :: A small IDE for Shell context
# JPL 20250222
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# toUpper()
#-----------------------------------------------------------------------
function toUpper {
	echo "$1" | awk '{print toupper($0)}'
}

#-----------------------------------------------------------------------
# toLower()
#-----------------------------------------------------------------------
function toLower {
	echo "$1" | awk '{print tolower($0)}'
}

#-----------------------------------------------------------------------
# licenseApache()
#-----------------------------------------------------------------------
function licenseApache {
	fileLicense="apache-v2.0.md"
	wget -q "${urlLicenses}${fileLicense}"
	gitAddFile "${fileLicense}"
}

#-----------------------------------------------------------------------
# licenseArtistic()
#-----------------------------------------------------------------------
function licenseArtistic {
	fileLicense="artistic-v2.0.md"
	wget -q "${urlLicenses}${fileLicense}"
	gitAddFile "${fileLicense}"
}

#-----------------------------------------------------------------------
# licenseBSDv2()
#-----------------------------------------------------------------------
function licenseBSDv2 {
	fileLicense="bsd-2.md"
	wget -q "${urlLicenses}${fileLicense}"
	gitAddFile "${fileLicense}"
}

#-----------------------------------------------------------------------
# licenseBSDv3()
#-----------------------------------------------------------------------
function licenseBSDv3 {
	fileLicense="bsd-3.md"
	wget -q "${urlLicenses}${fileLicense}"
	gitAddFile "${fileLicense}"
}

#-----------------------------------------------------------------------
# licenseEPL()
#-----------------------------------------------------------------------
function licenseEPL {
	fileLicense="epl-v1.0.md"
	wget -q "${urlLicenses}${fileLicense}"
	gitAddFile "${fileLicense}"
}

#-----------------------------------------------------------------------
# licenseGNUAGPL()
#-----------------------------------------------------------------------
function licenseGNUAGPL {
	fileLicense="gnu-agpl-v3.0.md"
	wget -q "${urlLicenses}${fileLicense}"
	gitAddFile "${fileLicense}"
}

#-----------------------------------------------------------------------
# licenseGNUFDL()
#-----------------------------------------------------------------------
function licenseGNUFDL {
	fileLicense="gnu-fdl-v1.3.md"
	wget -q "${urlLicenses}${fileLicense}"
	gitAddFile "${fileLicense}"
}

#-----------------------------------------------------------------------
# licenseGNUGPLv1()
#-----------------------------------------------------------------------
function licenseGNUGPLv1 {
	fileLicense="gnu-gpl-v1.0.md"
	wget -q "${urlLicenses}${fileLicense}"
	gitAddFile "${fileLicense}"
}

#-----------------------------------------------------------------------
# licenseGNUCPLv2()
#-----------------------------------------------------------------------
function licenseGNUCPLv2 {
	fileLicense="gnu-gpl-v2.0.md"
	wget -q "${urlLicenses}${fileLicense}"
	gitAddFile "${fileLicense}"
}

#-----------------------------------------------------------------------
# licenseGNUGPLv3()
#-----------------------------------------------------------------------
function licenseGNUGPLv3 {
	fileLicense="gnu-gpl-v3.0.md"
	wget -q "${urlLicenses}${fileLicense}"
	gitAddFile "${fileLicense}"
}

#-----------------------------------------------------------------------
# licenseGNULGPLv2()
#-----------------------------------------------------------------------
function licenseGNULGPLv2 {
	fileLicense="gnu-lgpl-v2.1.md"
	wget -q "${urlLicenses}${fileLicense}"
	gitAddFile "${fileLicense}"
}

#-----------------------------------------------------------------------
# licenseGNULGPLv3()
#-----------------------------------------------------------------------
function licenseGNULGPLv3 {
	fileLicense="gnu-lgpl-v3.0.md"
	wget -q "${urlLicenses}${fileLicense}"
	gitAddFile "${fileLicense}"
}

#-----------------------------------------------------------------------
# licenseMIT()
#-----------------------------------------------------------------------
function licenseMIT {
	fileLicense="mit.md"
	wget -q "${urlLicenses}${fileLicense}"
	gitAddFile "${fileLicense}"
}

#-----------------------------------------------------------------------
# licenseMPL()
#-----------------------------------------------------------------------
function licenseMPL {
	fileLicense="mpl-v2.0.md"
	wget -q "${urlLicenses}${fileLicense}"
	gitAddFile "${fileLicense}"
}

#-----------------------------------------------------------------------
# licenseUnlicense()
#-----------------------------------------------------------------------
function licenseUnlicense {
	fileLicense="unlicense.md"
	wget -q "${urlLicenses}${fileLicense}"
	gitAddFile "${fileLicense}"
}

#-----------------------------------------------------------------------
# createThemeDarkYellowRed()
#-----------------------------------------------------------------------
function createThemeDarkYellowRed {
	fileTheme="dialogrc-dark-yellow-red.txt"
	if [ ! -e "$configDir/$fileTheme" ]; then
		cat > "$configDir/$fileTheme" <<EOF
#
# Run-time configuration file for dialog
#
# Types of values:
#
# Number     -  <number>
# String     -  "string"
# Boolean    -  <ON|OFF>
# Attribute  -  (foreground,background,highlight?)
# 0 black, 1 red, 2 green, 3 yellow, 4 blue, 5 magenta, 6 cyan and 7 white

# Set aspect-ratio
aspect = 0

# Set separator (for multiple widgets output)
separate_widget = ""

# Set tab-length (for textbox tab-conversion)
tab_len = 0

# Make tab-traversal for checklist, etc., include the list
visit_items = OFF

# Shadow dialog boxes? This also turns on color.
use_shadow = ON

# Turn color support ON or OFF
use_colors = ON

# Screen color
screen_color = (YELLOW,BLACK,ON)

# Shadow color
shadow_color = (BLACK,BLACK,OFF)

# Dialog box color
dialog_color = (WHITE,BLACK,OFF)

# Dialog box title color
title_color = (YELLOW,BLACK,OFF)

# Dialog box border color
border_color = (RED,BLACK,ON)
border2_color = (RED,BLACK,OFF)

# Active button color
button_active_color = (BLACK,YELLOW,OFF)

# Inactive button color
button_inactive_color = (WHITE,BLACK,OFF)

# Active button key color
button_key_active_color = (YELLOW,WHITE,OFF)

# Inactive button key color
button_key_inactive_color = (WHITE,BLACK,OFF)

# Active button label color
button_label_active_color = (BLACK,YELLOW,OFF)

# Inactive button label color
button_label_inactive_color = (YELLOW,BLACK,OFF)

# Input box color
inputbox_color = (WHITE,BLACK,OFF)

# Input box border color
inputbox_border_color = (WHITE,BLACK,OFF)
inputbox_border2_color = (WHITE,BLACK,OFF)

# Search box color
searchbox_color = (WHITE,BLACK,OFF)

# Search box title color
searchbox_title_color = (WHITE,BLACK,OFF)

# Search box border color
searchbox_border_color = (BLACK,BLACK,OFF)
searchbox_border2_color = (BLACK,BLACK,OFF)

# File position indicator color
position_indicator_color = (YELLOW,BLACK,OFF)

# Menu box color
menubox_color = (WHITE,BLACK,OFF)

# Menu box border color
menubox_border_color = (BLACK,BLACK,OFF)
menubox_border2_color = (BLACK,BLACK,OFF)

# Item color
item_color = (WHITE,BLACK,OFF)

# Selected item color
item_selected_color = (BLACK,YELLOW,OFF)

# Tag color
tag_color = (WHITE,BLACK,OFF)

# Selected tag color
tag_selected_color = (BLACK,YELLOW,OFF)

# Tag key color
tag_key_color = (WHITE,BLACK,OFF)

# Selected tag key color
tag_key_selected_color = (YELLOW,BLACK,OFF)

# Check box color
check_color = (WHITE,BLACK,OFF)

# Selected check box color
check_selected_color = (WHITE,BLACK,OFF)

# Up arrow color
uarrow_color = (BLACK,YELLOW,OFF)

# Down arrow color
darrow_color = (BLACK,YELLOW,OFF)

# Item help-text color
itemhelp_color = (WHITE,BLACK,OFF)

# Active form text color
form_active_text_color = (BLACK,WHITE,OFF)

# Form text color
form_text_color = (WHITE,BLACK,OFF)

# Readonly form item color
form_item_readonly_color = (WHITE,BLACK,OFF)

# Dialog box gauge color
gauge_color = (WHITE,BLACK,OFF)
EOF
	fi
}	

#-----------------------------------------------------------------------
# createThemeDarkYellowGreen()
#-----------------------------------------------------------------------
function createThemeDarkYellowGreen {
	fileTheme="dialogrc-dark-yellow-green.txt"
	if [ ! -e "$configDir/$fileTheme" ]; then
		cat > "$configDir/$fileTheme" <<EOF
# $Id: slackware.rc,v 1.2 2001/12/02 21:19:05 Patrick.J.Volkerding Exp $
# Run-time configuration file for dialog, matches Slackware color scheme.
#
# Types of values:
#
# Number     -  <number>
# String     -  "string"
# Boolean    -  <ON|OFF>
# Attribute  -  (foreground,background,highlight?)
# edited by alislack

# Set aspect-ration.
aspect = 0

# Set separator (for multiple widgets output).
separate_widget = ""

# Set tab-length (for textbox tab-conversion).
tab_len = 0

# Make tab-traversal for checklist, etc., include the list.
visit_items = OFF

# Shadow dialog boxes? This also turns on color.
use_shadow = ON

# Turn color support ON or OFF
use_colors = ON

# Screen color
screen_color = (CYAN,BLACK,OFF)

# Shadow color
shadow_color = (WHITE,BLACK,OFF)

# Dialog box color
dialog_color = (GREEN,BLACK,ON)

# Dialog box title color
title_color = (YELLOW,BLACK,ON)

# Dialog box border color
border_color = (GREEN,BLACK,ON)

# Active button color
button_active_color = (WHITE,BLUE,ON)

# Inactive button color
button_inactive_color = (WHITE,BLACK,OFF)

# Active button key color
button_key_active_color = (WHITE,BLUE,ON)

# Inactive button key color
button_key_inactive_color = (CYAN,BLACK,OFF)

# Active button label color
button_label_active_color = (WHITE,BLUE,ON)

# Inactive button label color
button_label_inactive_color = (WHITE,BLACK,ON)

# Input box color
inputbox_color = (BLUE,WHITE,OFF)

# Input box border color
inputbox_border_color = (BLACK,BLACK,ON)

# Search box color
searchbox_color = (YELLOW,BLACK,ON)

# Search box title color
searchbox_title_color = (WHITE,WHITE,ON)

# Search box border color
searchbox_border_color = (RED,WHITE,OFF)

# File position indicator color
position_indicator_color = (YELLOW,BLACK,OFF)

# Menu box color
menubox_color = (GREEN,BLACK,OFF)

# Menu box border color
menubox_border_color = (GREEN,BLACK,ON)

#
# Item color
item_color = (GREEN,BLACK,OFF)

# Selected item color
item_selected_color = (CYAN,BLACK,OFF)

# Tag color
tag_color = (YELLOW,BLACK,ON)

# Selected tag color
tag_selected_color = (WHITE,BLUE,OFF)

# Tag key color
tag_key_color = (CYAN,BLACK,OFF)

# Selected tag key color
tag_key_selected_color = (GREEN,BLUE,ON)

# Check box color
check_color = (CYAN,BLACK,OFF)

# Selected check box color
check_selected_color = (WHITE,CYAN,ON)

# Up arrow color
uarrow_color = (GREEN,BLUE,ON)

# Down arrow color
darrow_color = (GREEN,BLUE,ON)

# Item help-text color
itemhelp_color = (CYAN,BLACK,OFF)

# alislack fix
# border2 are the shadows arounds the boxes
# change from dialog_color to GREEN,BLACK
# to remove the shadow at bottom of screen
#
# Dialog box border2 color
#border2_color = dialog_color
border2_color = (GREEN,BLACK,OFF)

# Input box border2 color
inputbox_border2_color = (GREEN,BLACK,ON)

# Search box border2 color
searchbox_border2_color = (GREEN,BLACK,ON)

# Menu box border2 color
menubox_border2_color = (GREEN,BLACK,ON)
EOF
	fi
}

#-----------------------------------------------------------------------
# createThemeOriginal()
#-----------------------------------------------------------------------
function createThemeOriginal {
	fileTheme="dialogrc-original.txt"
	if [ ! -e "$configDir/$fileTheme" ]; then
		cat > "$configDir/$fileTheme" <<EOF
# Run-time configuration file for dialog
#
# Automatically generated by "dialog --create-rc <file>"
#
#
# Types of values:
#
# Number     -  <number>
# String     -  "string"
# Boolean    -  <ON|OFF>
# Attribute  -  (foreground,background,highlight?)
# Set aspect-ration.
aspect = 0

# Set separator (for multiple widgets output).
separate_widget = ""

# Set tab-length (for textbox tab-conversion).
tab_len = 0

# Make tab-traversal for checklist, etc., include the list.
visit_items = OFF

# Shadow dialog boxes? This also turns on color.
use_shadow = ON

# Turn color support ON or OFF
use_colors = ON

# Screen color
screen_color = (CYAN,BLUE,ON)

# Shadow color
shadow_color = (BLACK,BLACK,ON)

# Dialog box color
dialog_color = (BLACK,WHITE,OFF)

# Dialog box title color
title_color = (BLUE,WHITE,ON)

# Dialog box border color
border_color = (WHITE,WHITE,ON)

# Active button color
button_active_color = (WHITE,BLUE,ON)

# Inactive button color
button_inactive_color = (BLACK,WHITE,OFF)

# Active button key color
button_key_active_color = (WHITE,BLUE,ON)

# Inactive button key color
button_key_inactive_color = (RED,WHITE,OFF)

# Active button label color
button_label_active_color = (YELLOW,BLUE,ON)

# Inactive button label color
button_label_inactive_color = (BLACK,WHITE,ON)

# Input box color
inputbox_color = (BLACK,WHITE,OFF)

# Input box border color
inputbox_border_color = (BLACK,WHITE,OFF)

# Search box color
searchbox_color = (BLACK,WHITE,OFF)

# Search box title color
searchbox_title_color = (BLUE,WHITE,ON)

# Search box border color
searchbox_border_color = (WHITE,WHITE,ON)

# File position indicator color
position_indicator_color = (BLUE,WHITE,ON)

# Menu box color
menubox_color = (BLACK,WHITE,OFF)

# Menu box border color
menubox_border_color = (WHITE,WHITE,ON)

# Item color
item_color = (BLACK,WHITE,OFF)

# Selected item color
item_selected_color = (WHITE,BLUE,ON)

# Tag color
tag_color = (BLUE,WHITE,ON)

# Selected tag color
tag_selected_color = (YELLOW,BLUE,ON)

# Tag key color
tag_key_color = (RED,WHITE,OFF)

# Selected tag key color
tag_key_selected_color = (RED,BLUE,ON)

# Check box color
check_color = (BLACK,WHITE,OFF)

# Selected check box color
check_selected_color = (WHITE,BLUE,ON)

# Up arrow color
uarrow_color = (GREEN,WHITE,ON)

# Down arrow color
darrow_color = (GREEN,WHITE,ON)

# Item help-text color
itemhelp_color = (WHITE,BLACK,OFF)

# Active form text color
form_active_text_color = (WHITE,BLUE,ON)

# Form text color
form_text_color = (WHITE,CYAN,ON)

# Readonly form item color
form_item_readonly_color = (CYAN,WHITE,ON)
EOF
	fi
}

#-----------------------------------------------------------------------
# setTheme()
#-----------------------------------------------------------------------
function setTheme {
	export DIALOGRC=${themeIDE}
}

#-----------------------------------------------------------------------
# saveConfig()
#-----------------------------------------------------------------------
function saveConfig {
	cat > "$configDir/$ide.conf" <<EOF
themeIDE="${themeIDE}"
userIDE="${userIDE}"
mailIDE="${mailIDE}"
confirmExitIDE=${confirmExitIDE}
EOF
}

#-----------------------------------------------------------------------
# readConfig()
#-----------------------------------------------------------------------
function readConfig {
	if [ -e "$configDir/$ide.conf" ]; then
		source "$configDir/$ide.conf"
	else
		themeIDE="$configDir/dialogrc-original.txt"
		userIDE="$USER"
		mailIDE="$USER@$(hostname)"
		confirmExitIDE=true
	fi
	setTheme
}

#-----------------------------------------------------------------------
# configureIDE()
#-----------------------------------------------------------------------
function configureTheme {
	createThemeDarkYellowGreen
	createThemeDarkYellowRed
	createThemeOriginal
	itemsThemes=( 	1 "Classic"
				2 "Dark / Yellow / Green"
				3 "Dark / Yellow / Red")
					
	while choice=$(dialog --backtitle "${ide} :: ${project} [${language}]" \
				--title "Theme" \
				--menu "" 12 40 10 "${itemsThemes[@]}" \
				2>&1 >/dev/tty)
		do
		case $choice in
			1) 	themeIDE="$configDir/dialogrc-original.txt" 
				setTheme ;;
			2) 	themeIDE="$configDir/dialogrc-dark-yellow-green.txt"
				setTheme ;;
			3) 	themeIDE="$configDir/dialogrc-dark-yellow-red.txt"
				setTheme ;;
			*) ;;
		esac
		break
	done	
}

#-----------------------------------------------------------------------
# configureUserName()
#-----------------------------------------------------------------------
function configureUserName {
	if [ -z ${userIDE+x} ]; then
		tmpUser=$USER
	else
		tmpUser="${userIDE}"
	fi
	varUser=$(dialog --backtitle "${ide} :: ${project} [${language}]" \
			 --title "User's name" \
			 --inputbox "\nPlease, enter your user's name :" 12 40 "${tmpUser}" \
			 2>&1 >/dev/tty)
	button=$?
	if [ $button -eq 0 ]; then
		userIDE="${varUser}"
	fi
}

#-----------------------------------------------------------------------
# configureMailAddress()
#-----------------------------------------------------------------------
function configureMailAddress {
	if [ -z ${mailIDE+x} ]; then
		tmpMail="$USER@$(hostname)"
	else
		tmpMail="${mailIDE}"
	fi
	varMail=$(dialog --backtitle "${ide} :: ${project} [${language}]" \
			 --title "Mail Address" \
			 --inputbox "\nPlease, enter your mail address :" 12 40 "${tmpMail}" \
			 2>&1 >/dev/tty)
	button=$?
	if [ $button -eq 0 ]; then
		mailIDE="${varMail}"
	fi
}

#-----------------------------------------------------------------------
# configureConfirmExit()
#-----------------------------------------------------------------------
function configureConfirmExit {
	dialog 	--backtitle "${ide} :: ${project} [${language}]" \
		--title "Confirm exit" \
		--yesno "\nWould you like to confirm on exit ?\n\nCurrently, the value is ${confirmExitIDE}" 11 60
	response=$?
	case $response in
		0) confirmExitIDE=true ;;
		1) confirmExitIDE=false ;;
		*) ;;
	esac
}

#-----------------------------------------------------------------------
# configureIDE()
#-----------------------------------------------------------------------
function configureIDE {
	itemsConfig=( 1 "User name"
				2 "Mail address"
				3 "Theme"
				4 "Confirmation on exit")
					
	while choice=$(dialog --backtitle "${ide} :: ${project} [${language}]" \
				--title "IDE Configuration" \
				--menu "" 12 40 10 "${itemsConfig[@]}" \
				2>&1 >/dev/tty)
		do
		case $choice in
			1) 	configureUserName ;;
			2) 	configureMailAddress ;;
			3) 	configureTheme ;;
			4) 	configureConfirmExit ;;
			*) ;;
		esac
		break
	done
}

#-----------------------------------------------------------------------
# chooseLicense()
#-----------------------------------------------------------------------
function chooseLicense {
	urlLicenses="https://raw.githubusercontent.com/IQAndreas/markdown-licenses/refs/heads/master/"
	itemsLicenses=( 	1 "Apache"
				2 "Artistic"
				3 "BSD v2.0 (Simplified BSD License)"
				4 "BSD v3.0 (Modified BSD License)"
				5 "Eclipse Public License"
				6 "GNU Affero General Public License"
				7 "GNU Free Documentation License"
				8 "GNU General Public License v1.0"
				9 "GNU General Public License v2.0"
				10 "GNU General Public License v3.0"
				11 "GNU Lesser General Public License v2.1"
				12 "GNU Lesser General Public License v3.0"
				13 "MIT"
				14 "Mozilla Public License v2.0"
				15 "Unlicense (Public Domain)")
					
	while choice=$(dialog --backtitle "${ide} :: ${project} [${language}]" \
				--title "License" \
				--menu "" 25 50 10 "${itemsLicenses[@]}" \
				2>&1 >/dev/tty)
		do
		case $choice in
			1) licenseApache ;;
			2) licenseArtistic ;;
			3) licenseBSDv2 ;;
			4) licenseBSDv3 ;;
			5) licenseEPL ;;
			6) licenseGNUAGPL ;;
			7) licenseGNUFDL ;;
			8) licenseGNUGPLv1 ;;
			9) licenseGNUCPLv2 ;;
			10) licenseGNUGPLv3 ;;
			11) licenseGNULGPLv2 ;;
			12) licenseGNULGPLv3 ;;
			13) licenseMIT ;;
			14) licenseMPL ;;
			15) licenseUnlicense ;;
			*) ;;
		esac
		break
	done
}

#-----------------------------------------------------------------------
# createReadMe()
#-----------------------------------------------------------------------
function createReadMe {
	fileReadMe="${project}/README.md"
	projectName=`basename "${project}"`
	cat > "$fileReadMe" <<EOF
# ${projectName}

## Installation

## Usage

## Contributing

## License

EOF
}

#-----------------------------------------------------------------------
# createGitIgnore()
#-----------------------------------------------------------------------
function createGitIgnore {
	fileGitIgnore="${project}/.gitignore"
	cat > "$fileGitIgnore" <<EOF
# This file is used to ignore files which are generated
# ----------------------------------------------------------------------------

github.key
*~
*.autosave
*.a
*.core
*.moc
*.o
*.obj
*.orig
*.rej
*.so
*.so.*
*_pch.h.cpp
*_resource.rc
*.qm
.#*
*.*#
core
!core/
tags
.DS_Store
.directory
*.debug
Makefile*
*.prl
*.app
moc_*.cpp
ui_*.h
qrc_*.cpp
Thumbs.db
*.res
*.rc
/.qmake.cache
/.qmake.stash

# qtcreator generated files
*.pro.user*
*.qbs.user*
CMakeLists.txt.user*

# xemacs temporary files
*.flc

# Vim temporary files
.*.swp

# Visual Studio generated files
*.ib_pdb_index
*.idb
*.ilk
*.pdb
*.sln
*.suo
*.vcproj
*vcproj.*.*.user
*.ncb
*.sdf
*.opensdf
*.vcxproj
*vcxproj.*

# MinGW generated files
*.Debug
*.Release

# Python byte code
*.pyc

# Binaries
# --------
*.dll
*.exe

# Directories with generated files
.moc/
.obj/
.pch/
.rcc/
.uic/
/build*/
EOF
}	

#-----------------------------------------------------------------------
# openFile()
#-----------------------------------------------------------------------
function openFile {
	let i=0 # define counting variable
	W=() # define working array
	while read -r line; do # process file by file
		let i=$i+1
		W+=($i "$line")
	done < <( ls -a1 ./ )
	file=$(dialog 	--backtitle "${ide} :: ${project} [${language}]" \
					--title "Open file" \
					--menu "Please select :" 24 80 17 "${W[@]}" \
					2>&1 >/dev/tty)
	RESULT=$?
	clear
	if [ $RESULT -eq 0 ]; then 	# Exit with OK
		opt=${W[$((file * 2 -1))]}
		if [[ -d "$opt" ]] then	# Is it a directory...
			cd "$opt"
			openFile
		else			# or a file ?
			$EDITOR "$opt"
			break
		fi
	fi
}

#-----------------------------------------------------------------------
# deleteFile()
#-----------------------------------------------------------------------
function deleteFile {
	let i=0 # define counting variable
	W=() # define working array
	while read -r line; do # process file by file
		let i=$i+1
		W+=($i "$line")
	done < <( ls -a1 ./ )
	file=$(dialog 	--backtitle "${ide} :: ${project} [${language}]" \
					--title "Delete file" \
					--menu "Please select :" 24 80 17 "${W[@]}" \
					2>&1 >/dev/tty)
	RESULT=$?
	clear
	if [ $RESULT -eq 0 ]; then 	# Exit with OK
		opt=${W[$((file * 2 -1))]}
		if [[ -d "$opt" ]] then	# Is it a directory...
			cd "$opt"
			deleteFile
		else			# or a file ?
			dialog 	--backtitle "${ide} :: ${project} [${language}]" \
				--title "Deleting file" \
				--yesno "Are you sure you want to delete the following file ?\n\n$opt" 7 60
			response=$?
			case $response in
				0) git ls-files --error-unmatch "$opt" > /dev/null 2>&1
				rc=$?
				if [ $rc -eq 0 ]; then
					dialog --backtitle "${ide} :: ${project} [${language}]" \
						--title "Deleting file from GIT" \
						--yesno "Do you wish to remove this file from GIT tracking ?\n\n$opt" 7 60
					response=$?
					case $response in
						0) git reset HEAD -- "$opt" ;;
					
						*) ;;
					esac
				fi
				rm "$opt" ;;

				*) ;;
			esac
			break
		fi
	fi
}

#-----------------------------------------------------------------------
# gitAddFile()
#-----------------------------------------------------------------------
function gitAddFile {
	if [ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" = "true" ]; then
		dialog 	--backtitle "${ide} :: ${project} [${language}]" \
			--title "GIT adding file" \
			--yesno "\nWould you like to add the following file to the GIT tracking ?\n\n$1" 11 60
		response=$?
		case $response in
			0) git add $1 ;;
			*) ;;
		esac
	fi
}

#-----------------------------------------------------------------------
# newFileOther()
#-----------------------------------------------------------------------
function newFileOther {
	new=$(dialog --backtitle "${ide} :: ${project} [${language}]" \
			     --title "New file" \
				 --inputbox "Please, enter the file name :" 12 40 \
				 2>&1 >/dev/tty)
	if [[ -z "$new" ]] then
		return
	else
		touch "$new"
		gitAddFile "$new"
		$EDITOR "$new"
	fi
}

#-----------------------------------------------------------------------
# newFileC()
#-----------------------------------------------------------------------
function newFileC {
	new=$(dialog --backtitle "${ide} :: ${project} [${language}]" \
			     --title "New C file" \
				 --inputbox "Please, enter the file name :" 12 40 \
				 2>&1 >/dev/tty)
	if [[ -z "$new" ]] then
		return
	else
		mainFileX="${new}.c"
		fullFileX="${project}/${mainFileX}"
		cat > "$fullFileX" <<EOF
/**********************************************************************/
/* Copyright (C) $(date +%Y) ${userIDE} (${mailIDE}) */
/**********************************************************************/
#include <stdio.h>

int main(int argc, char *argv[]) {
	printf("Hello, World.\n");
	return 0;
}
EOF
		gitAddFile "$fullFileX"
		$EDITOR "$fullFileX"
	fi
}

#-----------------------------------------------------------------------
# newFileCPP()
#-----------------------------------------------------------------------
function newFileCPP {
	new=$(dialog --backtitle "${ide} :: ${project} [${language}]" \
			     --title "New C++ file" \
				 --inputbox "Please, enter the file name :" 12 40 \
				 2>&1 >/dev/tty)
	if [[ -z "$new" ]] then
		return
	else
		mainFileX="${new}.cpp"
		fullFileX="${project}/${mainFileX}"
		cat > "$fullFileX" <<EOF
//**********************************************************************
// Copyright (C) $(date +%Y) ${userIDE} (${mailIDE})
//**********************************************************************
#include <iostream>

int main() {
	std::cout << "Hello, World.\n";
	return 0;
}
EOF
		gitAddFile "$fullFileX"
		$EDITOR "$fullFileX"
	fi
}

#-----------------------------------------------------------------------
# newFileH()
#-----------------------------------------------------------------------
function newFileH {
	new=$(dialog --backtitle "${ide} :: ${project} [${language}]" \
			--title "New Header file" \
			--inputbox "Please, enter the file name :" 12 40 \
				 2>&1 >/dev/tty)
	if [[ -z "$new" ]] then
		return
	else
		mainFileX="${new}.h"
		fullFileX="${project}/${mainFileX}"
		includeH=$(toUpper $mainFileX | tr '.' '_')
		cat > "$fullFileX" <<EOF
/**********************************************************************/
/* Copyright (C) $(date +%Y) ${userIDE} (${mailIDE}) */
/**********************************************************************/
#ifndef $includeH
#define $includeH

#endif
EOF
		gitAddFile "$fullFileX"
		$EDITOR "$fullFileX"
	fi
}

#-----------------------------------------------------------------------
# newFileJAVA()
#-----------------------------------------------------------------------
function newFileJAVA {
	new=$(dialog --backtitle "${ide} :: ${project} [${language}]" \
		     --title "New Java file" \
		     --inputbox "Please, enter the file name :" 12 40 \
				 2>&1 >/dev/tty)
	if [[ -z "$new" ]] then
		return
	else
		class=`basename ${new}`
		mainFileX="${new}.java"
		fullFileX="${project}/${mainFileX}"
		cat > "$fullFileX" <<EOF
//**********************************************************************
// Copyright (C) $(date +%Y) ${userIDE} (${mailIDE})
//**********************************************************************
public final class ${class}
{
   /** Constructor. */
   public ${class}()
   {
	   System.out.println("Hello World.");
   }
}
EOF
		gitAddFile "$fullFileX"
		$EDITOR "$fullFileX"
	fi
}

#-----------------------------------------------------------------------
# newFilePY()
#-----------------------------------------------------------------------
function newFilePY {
	new=$(dialog --backtitle "${ide} :: ${project} [${language}]" \
			     --title "New Python file" \
				 --inputbox "Please, enter the file name :" 12 40 \
				 2>&1 >/dev/tty)
	if [[ -z "$new" ]] then
		return
	else
		mainFileX="${new}.py"
		fullFileX="${project}/${mainFileX}"
		cat > "$fullFileX" <<EOF
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#-------------------------------------------------------------------------------
# Copyright (C) $(date +%Y) ${userIDE} (${mailIDE})
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Imports
#-------------------------------------------------------------------------------
import sys

#-------------------------------------------------------------------------------
# main()
#-------------------------------------------------------------------------------
def main():
	print("This is the name of the script : ", sys.argv[0])
	print("Number of arguments            : ", len(sys.argv))
	print("The arguments are              : ", str(sys.argv))

if __name__ == "__main__":
    main()
EOF
		gitAddFile "$fullFileX"
		$EDITOR "$fullFileX"
	fi
}

#-----------------------------------------------------------------------
# newFileGO()
#-----------------------------------------------------------------------
function newFileGO {
	new=$(dialog --backtitle "${ide} :: ${project} [${language}]" \
			     --title "New Go file" \
				 --inputbox "Please, enter the file name :" 12 40 \
				 2>&1 >/dev/tty)
	if [[ -z "$new" ]] then
		return
	else
		mainFileX="${new}.go"
		fullFileX="${project}/${mainFileX}"
		cat > "$fullFileX" <<EOF
//**********************************************************************
// Copyright (C) $(date +%Y) ${userIDE} (${mailIDE})
//**********************************************************************
package main

import "fmt"

func main() {
    fmt.Println("Hello, World.")
}
EOF
		gitAddFile "$fullFileX"
		$EDITOR "$fullFileX"
	fi
}

#-----------------------------------------------------------------------
# newFileRS()
#-----------------------------------------------------------------------
function newFileRS {
	new=$(dialog --backtitle "${ide} :: ${project} [${language}]" \
			     --title "New Rust file" \
				 --inputbox "Please, enter the file name :" 12 40 \
				 2>&1 >/dev/tty)
	if [[ -z "$new" ]] then
		return
	else
		mainFileX="${new}.rs"
		fullFileX="${project}/${mainFileX}"
		cat > "$fullFileX" <<EOF
//**********************************************************************
// Copyright (C) $(date +%Y) ${userIDE} (${mailIDE})
//**********************************************************************
fn main() {
    println!("Hello, World.");
}
EOF
		gitAddFile "$fullFileX"
		$EDITOR "$fullFileX"
	fi
}

#-----------------------------------------------------------------------
# newFileHTML()
#-----------------------------------------------------------------------
function newFileHTML {
	new=$(dialog --backtitle "${ide} :: ${project} [${language}]" \
			     --title "New HTML file" \
				 --inputbox "Please, enter the file name :" 12 40 \
				 2>&1 >/dev/tty)
	if [[ -z "$new" ]] then
		return
	else
		mainFileX="${new}.html"
		fullFileX="${project}/${mainFileX}"
		cat > "$fullFileX" <<EOF
<!doctype html>
<html>
  <head>
    <title>This is the title of the webpage!</title>
  </head>
  <body>
    <p>This is an example paragraph. Anything in the <strong>body</strong> tag will appear on the page, just like this <strong>p</strong> tag and its contents.</p>
  </body>
</html>
EOF
		gitAddFile "$fullFileX"
		$EDITOR "$fullFileX"
	fi
}

#-----------------------------------------------------------------------
# newFileXML()
#-----------------------------------------------------------------------
function newFileXML {
	new=$(dialog --backtitle "${ide} :: ${project} [${language}]" \
			     --title "New XML file" \
				 --inputbox "Please, enter the file name :" 12 40 \
				 2>&1 >/dev/tty)
	if [[ -z "$new" ]] then
		return
	else
		mainFileX="${new}.xml"
		fullFileX="${project}/${mainFileX}"
		cat > "$fullFileX" <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<note>
  <to>Tove</to>
  <from>Jani</from>
  <heading>Reminder</heading>
  <body>Don't forget me this weekend!</body>
</note>
EOF
		gitAddFile "$fullFileX"
		$EDITOR "$fullFileX"
	fi
}

#-----------------------------------------------------------------------
# newFileJSON()
#-----------------------------------------------------------------------
function newFileJSON {
	new=$(dialog --backtitle "${ide} :: ${project} [${language}]" \
			     --title "New JSON file" \
				 --inputbox "Please, enter the file name :" 12 40 \
				 2>&1 >/dev/tty)
	if [[ -z "$new" ]] then
		return
	else
		mainFileX="${new}.json"
		fullFileX="${project}/${mainFileX}"
		cat > "$fullFileX" <<EOF
{
  "first_name": "John",
  "last_name": "Smith",
  "is_alive": true,
  "age": 27,
  "address": {
    "street_address": "21 2nd Street",
    "city": "New York",
    "state": "NY",
    "postal_code": "10021-3100"
  },
  "phone_numbers": [
    {
      "type": "home",
      "number": "212 555-1234"
    },
    {
      "type": "office",
      "number": "646 555-4567"
    }
  ],
  "children": [
    "Catherine",
    "Thomas",
    "Trevor"
  ],
  "spouse": null
}
EOF
		gitAddFile "$fullFileX"
		$EDITOR "$fullFileX"
	fi
}

#-----------------------------------------------------------------------
# newFileMD()
#-----------------------------------------------------------------------
function newFileMD {
	new=$(dialog --backtitle "${ide} :: ${project} [${language}]" \
			     --title "New Markdown file" \
				 --inputbox "Please, enter the file name :" 12 40 \
				 2>&1 >/dev/tty)
	if [[ -z "$new" ]] then
		return
	else
		mainFileX="${new}.md"
		fullFileX="${project}/${mainFileX}"
		cat > "$fullFileX" <<EOF
# Example headings

## Sample Section

## This'll be a _Helpful_ Section About the Greek Letter Θ!
A heading containing characters not allowed in fragments, UTF-8 characters, two consecutive spaces between the first and second words, and formatting.

## This heading is not unique in the file

TEXT 1

## This heading is not unique in the file

TEXT 2

# Links to the example headings above

Link to the sample section: [Link Text](#sample-section).

Link to the helpful section: [Link Text](#thisll--be-a-helpful-section-about-the-greek-letter-Θ).

Link to the first non-unique section: [Link Text](#this-heading-is-not-unique-in-the-file).

Link to the second non-unique section: [Link Text](#this-heading-is-not-unique-in-the-file-1).
EOF
		gitAddFile "$fullFileX"
		$EDITOR "$fullFileX"
	fi
}

#-----------------------------------------------------------------------
# newFileTXT()
#-----------------------------------------------------------------------
function newFileTXT {
	new=$(dialog --backtitle "${ide} :: ${project} [${language}]" \
			     --title "New Text file" \
				 --inputbox "Please, enter the file name :" 12 40 \
				 2>&1 >/dev/tty)
	if [[ -z "$new" ]] then
		return
	else
		mainFileX="${new}.txt"
		fullFileX="${project}/${mainFileX}"
		cat > "$fullFileX" <<EOF
+----------------------------------------------------------------------+
|                         MY TEXT DOCUMENTATION                        |
+----------------------------------------------------------------------+

1. SUMMARY

2. DOCUMENTATION

3. CONCLUSION
EOF
		gitAddFile "$fullFileX"
		$EDITOR "$fullFileX"
	fi
}

#-----------------------------------------------------------------------
# newFolder()
#-----------------------------------------------------------------------
function newFolder {
	new=$(dialog --backtitle "${ide} :: ${project} [${language}]" \
			     --title "New folder" \
				 --inputbox "Please, enter the new folder name :" 12 40 \
				 2>&1 >/dev/tty)
	if [[ -z "$new" ]] then
		return
	else
		mkdir "$new"
		if [ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" = "true" ]; then
			dialog 	--backtitle "${ide} :: ${project} [${language}]" \
				--title "GIT adding file" \
				--yesno "\nWould you like to add the following folder to the GIT tracking ?\n\n${new}" 11 60
			response=$?
			case $response in
				0) git add ${new} ;;
				*) ;;
			esac
		fi
	fi
}

#-----------------------------------------------------------------------
# menuNewFile()
#-----------------------------------------------------------------------
function menuNewFile {
	itemsNew=( 	1 "C file      (.c)"
			2 "C++ file    (.cpp)"
			3 "Header file (.h)"
			4 "Java file   (.java)"
			5 "Python file (.py)"
			6 "Go file     (.go)"
			7 "Rust file   (.rs)"
                        8 "HTML file   (.html)"
                        9 "XML file    (.xml)"
                       10 "JSON file   (.json)"
                       11 "Markdown    (.md)"
                       12 "Text        (.txt)"
                       13 "License"
                       14 "Other")

	while choice=$(dialog --backtitle "${ide} :: ${project} [${language}]" \
				--title "New file" \
				--menu "" 20 40 10 "${itemsNew[@]}" \
				2>&1 >/dev/tty)
		do
		case $choice in
			1) newFileC ;;
			2) newFileCPP ;;
			3) newFileH ;;
			4) newFileJAVA ;;
			5) newFilePY ;;
			6) newFileGO ;;
			7) newFileRS ;;
			8) newFileHTML ;;
			9) newFileXML ;;
			10) newFileJSON ;;
			11) newFileMD ;;
			12) newFileTXT ;;
			13) chooseLicense ;;
			14) newFileOther ;;
			*) ;;
		esac
	done			
}

#-----------------------------------------------------------------------
# menuFiles()
#-----------------------------------------------------------------------
function menuFiles {
	itemsFiles=(	1 "Open file"
			2 "New file"
			3 "Delete file"
			4 "New folder"
			5 "Delete folder")
	while choice=$(dialog --backtitle "${ide} :: ${project} [${language}]" \
					 --title "Files" \
					 --menu "" 12 40 10 "${itemsFiles[@]}" \
					 2>&1 >/dev/tty)	
		do
		case $choice in
			1) openFile ;;
			2) menuNewFile ;;
			3) deleteFile ;;
			4) newFolder ;;
			5) deleteFolder ;;
			*) ;; # some action on other
		esac
	done	
}

#-----------------------------------------------------------------------
# updateMRUProjects()
#-----------------------------------------------------------------------
function updateMRUProjects {
	echo
}

#-----------------------------------------------------------------------
# openProject()
#-----------------------------------------------------------------------
function openProject {
	let i=0 # define counting variable
	W=() # define working array
	while read -r line; do # process file by file
		let i=$i+1
		W+=($i "$line")
	done < <( find . -maxdepth 1 -type d -o -type l | sort -k1 )
	file=$(dialog 	--backtitle "${ide} :: ${project} [${language}]" \
					--title "Open project" \
					--menu "Please, move to the project folder :" 24 80 17 "${W[@]}" \
					2>&1 >/dev/tty)
	RESULT=$?
	clear
	if [ $RESULT -eq 0 ]; then 	# Exit with OK
		opt=${W[$((file * 2 -1))]}
		if [[ $opt = "." ]] then
			cd ..
			project=$PWD
			openProject
		else
			cd "$opt"
			project=$PWD
			openProject
		fi
		guessLanguage
	else
		updateMRUProjects
	fi
}

#-----------------------------------------------------------------------
# inputNewProjectName()
#-----------------------------------------------------------------------
function inputNewProjectName {
	new=$(dialog --backtitle "${ide} :: ${project} [${language}]" \
				 --title "New project" \
				 --inputbox "Please, enter the project name :" 12 40 \
				 2>&1 >/dev/tty)
	echo $new
}

#-----------------------------------------------------------------------
# projectPYTHON()
#-----------------------------------------------------------------------
function projectPYTHON {
	language="PYTHON"
	new=$(inputNewProjectName)
	if [[ -z $new ]] then
		return
	else
		mkdir "$new"
		cd "$new"
		project=$PWD
		chooseLicense
	fi
	mainFileX=`basename "${project}".py`
	fullFileX="${project}/${mainFileX}"
	cat > "$fullFileX" <<EOF
#!/usr/bin/env python
# -*- coding: utf-8 *-*

import sys

def main():
	print("This is the name of the script : ", sys.argv[0])
	print("Number of arguments            : ", len(sys.argv))
	print("The arguments are              : ", str(sys.argv))

if __name__ == "__main__":
	main()
EOF
	chmod +x "$fullFileX"
	createReadMe
	$EDITOR "$fullFileX"
}

#-----------------------------------------------------------------------
# projectJAVA()
#-----------------------------------------------------------------------
function projectJAVA {
	language="JAVA"
	new=$(inputNewProjectName)
	if [[ -z $new ]] then
		return
	else
		mkdir "$new"
		cd "$new"
		project=$PWD
		chooseLicense
	fi
	class=`basename "${project}"`
	mainFileX=`basename "${project}".java`
	fullFileX="${project}/${mainFileX}"
	cat > "$fullFileX" <<EOF
public final class ${class}
{
   /** Constructor. */
   public ${class}()
   {
	   System.out.println("Hello World.");
   }

   public static void main(String[] args) throws Exception
   {
      new ${class}();
   }
}
EOF
	mkdir "META-INF"
	manifest="${project}/META-INF/MANIFEST.MF"
	cat > "$manifest" <<EOF
Manifest-Version: 1.0
Main-Class: ${class}
Built-By: ${ide}
EOF
	createReadMe
	$EDITOR "$fullFileX"
}

#-----------------------------------------------------------------------
# projectCRaw()
#-----------------------------------------------------------------------
function projectCRaw {
	new=$(inputNewProjectName)
	if [[ -z $new ]] then
		return
	else
		mkdir "$new"
		cd "$new"
		project=$PWD
		chooseLicense
	fi
	mainFileH=`basename "${project}".h`
	fullFileH="${project}/${mainFileH}"
	includeH=$(toUpper $mainFileH | tr '.' '_')
	cat > "$fullFileH" <<EOF
#ifndef $includeH
#define $includeH

#endif
EOF
	mainFileC=`basename "${project}".c`
	fullFileC="${project}/${mainFileC}"
	cat > "$fullFileC" <<EOF
#include "$mainFileH"
#include <stdio.h>

int main(int argc, char *argv[]) {
	printf("Hello, World.\n");
	return 0;
}
EOF
	binFile=`basename "${project}"`
	buildFile="${project}/_build"
	cat > "$buildFile" <<EOF
#!/bin/bash

gcc -o $binFile $mainFileC $mainFileH
EOF
	chmod +x "$buildFile"
	createReadMe
	$EDITOR "$fullFileC" "$fullFileH"
}

#-----------------------------------------------------------------------
# projectCPPRaw()
#-----------------------------------------------------------------------
function projectCPPRaw {
	new=$(inputNewProjectName)
	if [[ -z $new ]] then
		return
	else
		mkdir "$new"
		cd "$new"
		project=$PWD
		chooseLicense
	fi
	mainFileH=`basename "${project}".h`
	fullFileH="${project}/${mainFileH}"
	includeH=$(toUpper $mainFileH | tr '.' '_')
	cat > "$fullFileH" <<EOF
#ifndef $includeH
#define $includeH

#endif
EOF
	mainFileCPP=`basename "${project}".cpp`
	fullFileCPP="${project}/${mainFileCPP}"
	cat > "$fullFileCPP" <<EOF
#include "$mainFileH"
#include <iostream>

int main() {
  std::cout << "Hello, World.\n";
  return 0;
}
EOF
	binFile=`basename "${project}"`
	buildFile="${project}/_build"
	cat > "$buildFile" <<EOF
#!/bin/bash

g++ -o $binFile $mainFileCPP $mainFileH
EOF
	chmod +x "$buildFile"
	createReadMe
	$EDITOR "$fullFileCPP" "$fullFileH"
}

#-----------------------------------------------------------------------
# projectCNCurses()
#-----------------------------------------------------------------------
function projectCNCurses {
	new=$(inputNewProjectName)
	if [[ -z $new ]] then
		return
	else
		mkdir "$new"
		cd "$new"
		project=$PWD
		chooseLicense
	fi
	mainFileH=`basename "${project}".h`
	fullFileH="${project}/${mainFileH}"
	includeH=$(toUpper $mainFileH | tr '.' '_')
	cat > "$fullFileH" <<EOF
#ifndef $includeH
#define $includeH

#endif
EOF
	mainFileC=`basename "${project}".c`
	fullFileC="${project}/${mainFileC}"
	cat > "$fullFileC" <<EOF
#include "$mainFileH"
#include <ncurses/ncurses.h>
 
int main(int argc, char *argv[]) {
	initscr();			/* Start curses mode 		  */
	printw("Hello World !!!");	/* Print Hello World		  */
	refresh();			/* Print it on to the real screen */
	getch();			/* Wait for user input */
	endwin();			/* End curses mode		  */
	return 0;
}
EOF
	binFile=`basename "${project}"`
	buildFile="${project}/_build"
	cat > "$buildFile" <<EOF
#!/bin/bash

gcc -lncurses -o $binFile $mainFileC $mainFileH
EOF
	chmod +x "$buildFile"
	createReadMe
	$EDITOR "$fullFileC" "$fullFileH"
}

#-----------------------------------------------------------------------
# projectC()
#-----------------------------------------------------------------------
function projectC {
	language="C/C++"
	itemsCToolkits=(1 "C Raw"
			2 "C NCurses"
			3 "C++ Raw")
	while choice=$(dialog --backtitle "${ide} :: ${project} [${language}]" \
				 --title "C Toolkit" \
				 --menu "" 12 40 10 "${itemsCToolkits[@]}" \
				 2>&1 >/dev/tty)	
		do
		case $choice in
			1) projectCRaw ;;
			2) projectCNCurses ;;
			3) projectCPPRaw ;;
			*) ;; # some action on other
		esac
	done	
}

#-----------------------------------------------------------------------
# projectGO()
#-----------------------------------------------------------------------
function projectGO {
	language="GO"
	new=$(inputNewProjectName)
	if [[ -z $new ]] then
		return
	else
		mkdir "$new"
		cd "$new"
		project=$PWD
		chooseLicense
	fi
	mainModule=`basename "${project}"`
	go mod init $mainModule
	mainFileGO=`basename "${project}".go`
	fullFileGO="${project}/${mainFileGO}"
	cat > "$fullFileGO" <<EOF
package main

import "fmt"

func main() {
    fmt.Println("Hello, World!")
}
EOF
	createReadMe
	$EDITOR "$fullFileGO"
}

#-----------------------------------------------------------------------
# projectGIT()
#-----------------------------------------------------------------------
function projectGIT {
	language="GIT"
	new=$(dialog --backtitle "${ide} :: ${project} [${language}]" \
				 --title "Clone GIT project" \
				 --inputbox "Please, enter the Github repository name :" 12 40 \
				 2>&1 >/dev/tty)
	if [[ -z $new ]] then
		return
	else
		dialog --backtitle "${ide} :: ${project} [${language}]" \
			--title "GIT Cloning" \
			--infobox "\nCloning $new\n\nPlease wait..." 15 50
		git clone --progress $new &>/dev/null
		rc=$?
		if [[ $rc -eq 0 ]] then
			mainFolder=`basename ${new}`
			cd "$mainFolder"
			project=$PWD
			guessLanguage
			infoProject
		else
			dialog --backtitle "${ide} :: ${project} [${language}]" \
			--title "GIT Cloning" \
			--msgbox "\nError cloning :\n\n$new" 15 50
		fi
	fi
}

#-----------------------------------------------------------------------
# projectRUST()
#-----------------------------------------------------------------------
function projectRUST {
	language="RUST"
	new=$(inputNewProjectName)
	if [[ -z $new ]] then
		return
	else
		mainModule=`basename ${new}`
		cargo new $mainModule &>/dev/null
		cd "$new"
		project=$PWD
		chooseLicense
		createReadMe
		infoProject
	fi
}

#-----------------------------------------------------------------------
# newProject()
#-----------------------------------------------------------------------
function newProject {
	itemsLanguages=(1 "C/C++"
			2 "Java"
			3 "Go"
			4 "Python"
			5 "Rust"
			6 "Clone from GIT")
	while choice=$(dialog --backtitle "${ide} :: ${project} [${language}]" \
				 --title "Language" \
				 --menu "" 13 40 10 "${itemsLanguages[@]}" \
				 2>&1 >/dev/tty)	
		do
		case $choice in
			1) projectC ;;
			2) projectJAVA ;;
			3) projectGO ;;
			4) projectPYTHON ;;
			5) projectRUST ;;
			6) projectGIT ;;
			*) ;; # some action on other
		esac
		break
	done
}

#-----------------------------------------------------------------------
# infoProject()
#-----------------------------------------------------------------------
function infoProject {
	outFile=`mktemp`
	rawProject=`basename "${project}"`
	tree -Dh > $outFile
	cloc ./ >> $outFile
	new=$(dialog --backtitle "${ide} :: ${project} [${language}]" \
			 --title "PROJECT :: $rawProject" \
			 --textbox "$outFile" 25 100 \
			 2>&1 >/dev/tty)
}

#-----------------------------------------------------------------------
# archiveProject()
#-----------------------------------------------------------------------
function archiveProject {
	fzip="${project}_$(date +"%Y%m%d-%H%M%S").zip"
			dialog --backtitle "${ide} :: ${project} [${language}]" \
			--title "Archiving project" \
			--infobox "\nArchiving to $fzip file.\n\nPlease wait..." 15 80
	zip -r "$fzip" ./ >/dev/null 2>&1
	dialog --backtitle "${ide} :: ${project} [${language}]" \
				 --title "Archiving project" \
				 --msgbox "\nThe following archive has been created :\n\n$fzip" 15 80 \
				 2>&1 >/dev/tty
}

#-----------------------------------------------------------------------
# countExtension()
#-----------------------------------------------------------------------
function countExtension {
	echo `find . -name \*.$1 -not -path \*/\.\* | wc -l`
}

#-----------------------------------------------------------------------
# guessLanguage()
#-----------------------------------------------------------------------
function guessLanguage {
	cd "$project"
	extFiles=$(countExtension "py")
	if [ $extFiles -gt 0 ]; then
		language="PYTHON"
	else
		extFiles=$(countExtension "go")
		if [ $extFiles -gt 0 ]; then
			language="GO"
		else
			extFiles=$(countExtension "c")
			if [ $extFiles -gt 0 ]; then
				language="C/C++"
			else
				extFiles=$(countExtension "cpp")
				if [ $extFiles -gt 0 ]; then
					language="C/C++"
				else
					extFiles=$(countExtension "java")
					if [ $extFiles -gt 0 ]; then
						language="JAVA"
					else
						extFiles=$(countExtension "rs")
						if [ $extFiles -gt 0 ]; then
							language="RUST"
						else
							language="UNKNOWN"
						fi
					fi
				fi
			fi
		fi
	fi
}

#-----------------------------------------------------------------------
# buildProgram()
#-----------------------------------------------------------------------
function buildProgram {
	cd "$project"
	buildFile="${project}/_build"
	if [ -f "$buildFile" ]; then
		outFile=`mktemp`
		$buildFile > $outFile 2>&1
		ec=$?
		case $ec in
			0) dialog --backtitle "${ide} :: ${project} [${language}]" \
				 --title "Build project" \
				 --msgbox "\nThe program has been build successfully.\n" 12 80 \
				 2>&1 >/dev/tty ;;
			*) dialog --backtitle "${ide} :: ${project}" \
				 --title "Build project" \
				 --textbox "$outFile" 25 80 \
				 2>&1 >/dev/tty ;;
		esac
		infoProject
	else
		pyFile=`basename "${project}".py`
		if [ -f "$pyFile" ]; then
			dialog --backtitle "${ide} :: ${project} [${language}]" \
				 --title "Build project" \
				 --msgbox "\nNo need to build Python program.\nYou just have to run it.\n" 12 80 \
				 2>&1 >/dev/tty
			infoProject
		else
			javaFile=`basename "${project}".java`
			jarFile=`basename "${project}".jar`
			classFile=`basename "${project}".class`
			if [ -f "$javaFile" ]; then
				clear
				javac -cp . $javaFile
				jar cvmf META-INF/MANIFEST.MF ${jarFile} ${classFile}
				pause
			else
				goFile=`basename "${project}".go`
				if [ -f "$goFile" ]; then
					outFile=`mktemp`
					go build . > $outFile 2>&1
					ec=$?
					case $ec in
						0) dialog --backtitle "${ide} :: ${project} [${language}]" \
							 --title "Build project" \
							 --msgbox "\nThe program has been build successfully.\n" 12 80 \
							 2>&1 >/dev/tty ;;
						*) dialog --backtitle "${ide} :: ${project} [${language}]" \
							 --title "Build project" \
							 --textbox "$outFile" 25 80 \
							 2>&1 >/dev/tty ;;
					esac
					infoProject
				else
					rustFile="Cargo.toml"
					if [ -f "$rustFile" ]; then
						outFile=`mktemp`
						cargo build > $outFile 2>&1
						ec=$?
						case $ec in
							0) dialog --backtitle "${ide} :: ${project} [${language}]" \
								 --title "Build project" \
								 --msgbox "\nThe program has been build successfully.\n" 12 80 \
								 2>&1 >/dev/tty ;;
							*) dialog --backtitle "${ide} :: ${project} [${language}]" \
								 --title "Build project" \
								 --textbox "$outFile" 25 80 \
								 2>&1 >/dev/tty ;;
						esac
						infoProject
					else
						dialog	--backtitle "${ide} :: ${project} [${language}]" \
							--title "ERROR" \
							--msgbox "\nCan't find something to build." 12 80 \
							2>&1 >/dev/tty
						infoProject
					fi
				fi
			fi
		fi
	fi
}

#-----------------------------------------------------------------------
# pause()
#-----------------------------------------------------------------------
function pause {
	read -p "Press any key to continue..." -n1 -s
}

#-----------------------------------------------------------------------
# buildRunProgram()
#-----------------------------------------------------------------------
function buildRunProgram {
	cd "$project"
	buildFile="${project}/_build"
	if [ -f "$buildFile" ]; then
		outFile=`mktemp`
		$buildFile > $outFile 2>&1
		ec=$?
		case $ec in
			0) runProgram ;;
			*) dialog --backtitle "${ide} :: ${project}" \
				 --title "Build project" \
				 --textbox "$outFile" 25 80 \
				 2>&1 >/dev/tty 
			   infoProject ;;
		esac
		
	else
		pyFile=`basename "${project}".py`
		if [ -f "$pyFile" ]; then
			runProgram
		else
			javaFile=`basename "${project}".java`
			jarFile=`basename "${project}".jar`
			classFile=`basename "${project}".class`
			if [ -f "$javaFile" ]; then
				clear
				javac -cp . $javaFile
				jar cvmf META-INF/MANIFEST.MF ${jarFile} ${classFile}
				runProgram
			else
				goFile=`basename "${project}".go`
				if [ -f "$goFile" ]; then
					outFile=`mktemp`
					go build . > $outFile 2>&1
					ec=$?
					case $ec in
						0) runProgram ;;
						*) dialog --backtitle "${ide} :: ${project} [${language}]" \
							 --title "Build project" \
							 --textbox "$outFile" 25 80 \
							 2>&1 >/dev/tty
						   infoProject ;;
					esac
				else
					rustFile="Cargo.toml"
					if [ -f "$rustFile" ]; then
						outFile=`mktemp`
						cargo build > $outFile 2>&1
						ec=$?
						case $ec in
							0) runProgram ;;
							*) dialog --backtitle "${ide} :: ${project} [${language}]" \
								 --title "Build project" \
								 --textbox "$outFile" 25 80 \
								 2>&1 >/dev/tty
							   infoProject ;;
						esac						
					else
						dialog	--backtitle "${ide} :: ${project} [${language}]" \
							--title "ERROR" \
							--msgbox "\nCan't find something to build and run." 12 80 \
							2>&1 >/dev/tty
						infoProject
					fi
				fi
			fi
		fi
	fi
}

#-----------------------------------------------------------------------
# runProgram()
#-----------------------------------------------------------------------
function runProgram {
	cd "$project"
	runFile="${project}/_run"
	if [ -f "$runFile" ]; then
		clear
		$runfile
		pause
	else
		binFile=`basename "${project}"`
		if [ -f "$binFile" ]; then
			if [ -x "$binFile" ]; then
				clear
				${project}/$binFile
				pause
			else
				dialog --backtitle "${ide} :: ${project} [${language}]" \
					 --title "ERROR" \
					 --msgbox "\nCan't execute :\n\n$binFile" 12 80 \
					 2>&1 >/dev/tty
			fi
		else
			pyFile=`basename "${project}".py`
			if [ -f "$pyFile" ]; then
				clear
				python ${project}/$pyFile
				pause
			else
				javaJar=`basename "${project}".jar`
				if [ -f "$javaJar" ]; then
					clear
					java -jar ${javaJar}
					pause
				else
					goFile=`basename "${project}".go`
					if [ -f "$goFile" ]; then
						clear
						go run .
						pause
					else
						rustFile="Cargo.toml"
						if [ -f "$rustFile" ]; then
							clear
							cargo run
							pause
						else
							dialog 	--backtitle "${ide} :: ${project} [${language}]" \
								--title "ERROR" \
								--msgbox "\nCan't find something to execute." 12 80 \
								2>&1 >/dev/tty
						fi
					fi
				fi
			fi 
		fi
	fi
}

#-----------------------------------------------------------------------
# customizeBuild()
#-----------------------------------------------------------------------
function customizeBuild {
	outFile=`mktemp`
	binFile=`basename "${project}"`
	buildFile="${project}/_build"
	if [ ! -f $buildFile ]; then
		cat > "$buildFile" <<EOF
#!/bin/bash

gcc -o $binFile myfile.c
EOF
	chmod +x "${buildFile}"
	fi
	dialog 	--backtitle "${ide} :: ${project} [${language}]" \
			--title "Customizing Build command" \
			--editbox $buildFile 10 60 2> "${outFile}"
	rc=$?
	if [ $rc -eq 0 ]; then
		cp "${outFile}" "${buildFile}"
		chmod +x "${buildFile}"
	fi
}

#-----------------------------------------------------------------------
# customizeRun()
#-----------------------------------------------------------------------
function customizeRun {
	outFile=`mktemp`
	binFile=`basename "${project}"`
	runFile="${project}/_run"
	if [ ! -f $runFile ]; then
		cat > "$runFile" <<EOF
#!/bin/bash

$project/$binFile
EOF
	chmod +x "${runFile}"
	fi
	dialog 	--backtitle "${ide} :: ${project} [${language}]" \
			--title "Customizing Run command" \
			--editbox $runFile 10 60 2> "${outFile}"
	rc=$?
	if [ $rc -eq 0 ]; then
		cp "${outFile}" "${runFile}"
		chmod +x "${runFile}"
	fi
}

#-----------------------------------------------------------------------
# customizeBuildRun()
#-----------------------------------------------------------------------
function customizeBuildRun {
	itemsBuildRun=(	1 "Customize Build"
			2 "Customize Run")
	while choice=$(dialog --backtitle "${ide} :: ${project} [${language}]" \
					 --title "Customize Build & Run" \
					 --menu "" 12 40 10 "${itemsBuildRun[@]}" \
					 2>&1 >/dev/tty)	
		do
		case $choice in
			1) customizeBuild ;;
			2) customizeRun ;;
			*) ;; # some action on other
		esac
	done		
}

#-----------------------------------------------------------------------
# menuBuildRun()
#-----------------------------------------------------------------------
function menuBuildRun {
	itemsBuildRun=(	1 "Build"
			2 "Run"
			3 "Build & Run"
			4 "Customize")
	while choice=$(dialog --backtitle "${ide} :: ${project} [${language}]" \
					 --title "Build & Run" \
					 --menu "" 12 40 10 "${itemsBuildRun[@]}" \
					 2>&1 >/dev/tty)	
		do
		case $choice in
			1) buildProgram ;;
			2) runProgram ;;
			3) buildRunProgram ;;
			4) customizeBuildRun ;;
			*) ;; # some action on other
		esac
	done	
}

#-----------------------------------------------------------------------
# gitStatus()
#-----------------------------------------------------------------------
function gitStatus {
	if [ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" = "true" ]; then
		outFile=`mktemp`
		echo "Current commit : " $(git rev-parse --short HEAD) &> $outFile
		echo -e "\n" >> $outFile
		git status &>> $outFile
		echo -e "\n" >> $outFile
		git diff &>> $outFile
		dialog --backtitle "${ide} :: ${project} [${language}]" \
				 --title "GIT Status" \
				 --textbox "$outFile" 25 100 \
				 2>&1 >/dev/tty
	else
		dialog --backtitle "${ide} :: ${project} [${language}]" \
			--title "GIT Status" \
			--msgbox "\nNo GIT repository found." 15 50
	fi
}

#-----------------------------------------------------------------------
# gitCommit()
#-----------------------------------------------------------------------
function gitCommit {
	if [ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" = "true" ]; then
		outFile=`mktemp`
		msg=$(dialog --backtitle "${ide} :: ${project} [${language}]" \
					 --title "GIT Commit" \
					 --inputbox "Please, enter the Commit message :" 12 40 \
					 2>&1 >/dev/tty)
		button=$?
		if [ $button -eq 0 ]; then				 
			git commit -a -m "${msg}" &> $outFile
			dialog --backtitle "${ide} :: ${project} [${language}]" \
				 --title "GIT Commit" \
				 --textbox "$outFile" 25 100 \
				 2>&1 >/dev/tty
		fi
	else
		dialog --backtitle "${ide} :: ${project} [${language}]" \
			--title "GIT Commit" \
			--msgbox "\nNo GIT repository found." 15 50
	fi
}

#-----------------------------------------------------------------------
# gitPush()
#-----------------------------------------------------------------------
function gitPush {
	if [ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" = "true" ]; then
		outFile=`mktemp`
		branch="$(git rev-parse --abbrev-ref HEAD)"
		git push origin ${branch} &> $outFile
		dialog --backtitle "${ide} :: ${project} [${language}]" \
			 --title "GIT Push" \
			 --textbox "$outFile" 25 100 \
			 2>&1 >/dev/tty
	else
		dialog --backtitle "${ide} :: ${project} [${language}]" \
			--title "GIT Push" \
			--msgbox "\nNo GIT repository found." 15 50
	fi
}

#-----------------------------------------------------------------------
# gitCommitPush()
#-----------------------------------------------------------------------
function gitCommitPush {
	if [ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" = "true" ]; then
		outFile=`mktemp`
		msg=$(dialog --backtitle "${ide} :: ${project} [${language}]" \
					 --title "GIT Commit & Push" \
					 --inputbox "\nPlease, enter the Commit message :" 12 40 \
					 2>&1 >/dev/tty)
		button=$?
		if [ $button -eq 0 ]; then
			git commit -a -m "${msg}" &> $outFile
			branch="$(git rev-parse --abbrev-ref HEAD)"
			git push origin ${branch} &>> $outFile
			dialog --backtitle "${ide} :: ${project} [${language}]" \
				 --title "GIT Commit & Push" \
				 --textbox "$outFile" 25 100 \
				 2>&1 >/dev/tty
		fi
	else
		dialog --backtitle "${ide} :: ${project} [${language}]" \
			--title "GIT Commit & Push" \
			--msgbox "\nNo GIT repository found." 15 50
	fi
}

#-----------------------------------------------------------------------
# gitConfigUser()
#-----------------------------------------------------------------------
function gitConfigUser {
	if [ -e "$configDir/.github.user" ]; then
		tmpuser=$(< $configDir/.github.user)
	else
		tmpuser=$USER
	fi
	gituser=$(dialog --backtitle "${ide} :: ${project} [${language}]" \
			 --title "GIT Config" \
			 --inputbox "\nPlease, enter your Github user :" 12 40 ${tmpuser} \
			 2>&1 >/dev/tty)
	button=$?
	if [ $button -eq 0 ]; then
		echo ${gituser} > $configDir/.github.user
	fi
}

#-----------------------------------------------------------------------
# gitConfigKey()
#-----------------------------------------------------------------------
function gitConfigKey {
	if [ -e "$configDir/.github.key" ]; then
		tmpkey=$(< $configDir/.github.key)
	fi
	gitkey=$(dialog --backtitle "${ide} :: ${project} [${language}]" \
			 --title "GIT Config" \
			 --inputbox "\nPlease, enter your Github key :" 12 50 ${tmpkey} \
			 2>&1 >/dev/tty)
	button=$?
	if [ $button -eq 0 ]; then
		echo ${gitkey} > $configDir/.github.key
	fi
}

#-----------------------------------------------------------------------
# gitBang()
#-----------------------------------------------------------------------
function gitBang {
	pjname=`basename "${project}"`
	dialog 	--backtitle "${ide} :: ${project} [${language}]" \
		--title "GIT Bang" \
		--yesno "\nThis will initialize a GIT environment for your project [${pjname}].\n\nAre you sure you want to proceed ?" 11 60
	response=$?
	case $response in
		0)
		if [ -e "$configDir/.github.user" ]; then
			gituser=$(< $configDir/.github.user)
		else
			gitConfigUser
		fi
		dialog 	--backtitle "${ide} :: ${project} [${language}]" \
			--title "GIT Bang" \
			--yesno "\nThe following repository should already exist :\n\nhttps://github.com/${gituser}/${pjname}\n\nHas the repository already been created ?" 13 60
		response=$?
		case $response in
			0) 		
			url="https://$(< $configDir/.github.key)@github.com/${gituser}/${pjname}"
			git add .
			git commit -m "First Commit"
			git remote add origin ${url}
			git branch -M main

			git pull --rebase origin main

			git push -u origin main

			# README.md file
			if [ ! -f "README.md" ]; then
				createReadMe
				git add README.md
			fi

			# .gitignore file
			if [ ! -e ".gitignore" ]; then
				createGitIgnore
				git add .gitignore
			fi

			git status
			;;
			
			*) ;;
		esac ;;

		*) ;;
	esac
}

#-----------------------------------------------------------------------
# gitConfigure()
#-----------------------------------------------------------------------
function gitConfigure {
	itemsGIT=(1 "Configure user"
		      2 "Configure key")
	while choice=$(dialog --backtitle "${ide} :: ${project} [${language}]" \
					 --title "GIT Configure" \
					 --menu "" 15 40 10 "${itemsGIT[@]}" \
					 2>&1 >/dev/tty)	
		do
		case $choice in
			1) gitConfigUser ;;
			2) gitConfigKey ;;
			*) ;; # some action on other
		esac
	done	
}

#-----------------------------------------------------------------------
# menuGIT()
#-----------------------------------------------------------------------
function menuGIT {
	itemsGIT=(1 "Status"
				  2 "Commit"
				  3 "Push"
				  4 "Commit & Push"
				  5 "Fetch"
				  6 "Pull (Fetch & Merge)"
				  7 "Initialize (GIT Bang)"
				  8 "Configure")
	while choice=$(dialog --backtitle "${ide} :: ${project} [${language}]" \
					 --title "GIT Tracking" \
					 --menu "" 15 40 10 "${itemsGIT[@]}" \
					 2>&1 >/dev/tty)	
		do
		case $choice in
			1) gitStatus ;;
			2) gitCommit ;;
			3) gitPush ;;
			4) gitCommitPush ;;
			5) gitFetch ;;
			6) gitPull ;;
			7) gitBang ;;
			8) gitConfigure ;;
			*) ;; # some action on other
		esac
	done	
}

#-----------------------------------------------------------------------
# menuProject()
#-----------------------------------------------------------------------
function menuProject {
	itemsProject=(1 "Open project"
				  2 "New project"
				  3 "Info"
				  4 "Archive project"
				  5 "Configure ${ide}")
	while choice=$(dialog --backtitle "${ide} :: ${project} [${language}]" \
					 --title "Project" \
					 --menu "" 12 40 10 "${itemsProject[@]}" \
					 2>&1 >/dev/tty)	
		do
		case $choice in
			1) openProject ;;
			2) newProject ;;
			3) infoProject ;;
			4) archiveProject ;;
			5) configureIDE ;;
			*) ;; # some action on other
		esac
	done	
}

#-----------------------------------------------------------------------
# menuExit()
#-----------------------------------------------------------------------
function menuExit {
	if [ ${confirmExitIDE} = true ]; then
		dialog 	--backtitle "${ide} :: ${project} [${language}]" \
			--title "Exiting" \
			--yesno "Are you sure you want to exit ?" 7 60
		response=$?
		case $response in
			0) doloop=0 ;;
			*) ;;
		esac
	else
		doloop=0
	fi
}

#-----------------------------------------------------------------------
# main()
#-----------------------------------------------------------------------
items=(1 "Project"
       2 "Files"
       3 "Build and Run"
       4 "GIT Tracking"
       5 "Exit")

ide=$(basename $0)
configDir=$HOME/.${ide}
project=$PWD
language="UNKNOWN"
guessLanguage
if [[ ! -e "$configDir" ]] then
	mkdir $configDir
fi
readConfig
doloop=1
while [ $doloop -eq 1 ]
do
	while choice=$(dialog --backtitle "${ide} :: ${project} [${language}]" \
					 --title "Main Menu" \
					 --menu "" 12 40 10 "${items[@]}" \
					 2>&1 >/dev/tty)	
	do
		case $choice in
			1) menuProject ;;
			2) menuFiles ;;
			3) menuBuildRun ;;
			4) menuGIT ;;
			5) menuExit	 ;;
			*) ;; # some action on other
		esac
		if [[ $doloop -eq 0 ]]; then
			break
		fi
	done
done
saveConfig
clear # Exiting
echo "${ide} :: Exiting at $(date '+%d/%m/%Y %H:%M:%S')."
